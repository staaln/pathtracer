{
    "collab_server" : "",
    "contents" : "# PathAct: Quantifying differential pathway activity\n# in tumors across patient subgroups\n\n# source(\"https://bioconductor.org/biocLite.R\")\n# biocLite(c(\"hgug4112a.db\",\"gplots\"))\n# biocLite(\"reactome.db\")\n# biocLite(\"pathifier\")\n# install.packages(\"foreach\")\n# install.packages(\"doMC\")\n\nlibrary(gplots)\nlibrary(reactome.db)\nlibrary(foreach)\nlibrary(doMC)\nlibrary(princurve)\nlibrary(pROC)\n\n#setwd(\"/Users/ole/Documents/Vilde/QPath\")\nsetwd(\"/Users/stalenygard/eurocan\")\n\n\n#path = function(s) {\n#    PATH = \"/Users/ole/Documents/Vilde/QPath/\"\n#    return(paste(PATH, s, sep=\"\"))\n#}\npath = function(s) {\n    PATH = \"/Users/stalenygard/eurocan\"\n    return(paste(PATH, s, sep=\"\"))\n}\n\nINP = path(\"Input\")\nOUT = path(\"Output\")\n\n#### A) Define functions\n\n# Input data should be ngenes x nsamples\n# Compute QPath solution\n# dat: expression data ({genes in pathway} x samples)\n# reference: boolean array identifying reference samples in dat\n\ncompute.QPath = function(dat, reference, ncomp=4, normalize=T,pathwayindex) {\n    # Check reference argument\n    if (mode(reference) == \"logical\") {\n        if (length(reference) != ncol(dat)) {\n            stop(paste(\"Boolean argument has wrong length: reference\"))\n        } else if (!any(reference)) {\n            stop(paste(\"Reference population must have at least one member\"))\n        } else if (all(reference)) {\n            stop(paste(\"Non-reference population must have at least one member\"))\n        }\n    } else if (mode(reference) == \"numeric\") {\n        reference = (1:ncol(dat)) %in% reference\n    } else {\n        stop(\"Argument must be logical vector or numeric vector: reference\")\n    }\n\n    # Normalize features if requested\n    if (normalize) {\n        for (i in 1:nrow(dat)) {\n            dat[i,] = (dat[i,]-mean(dat[i,]))/sd(dat[i,])\n        }\n    }\n\n    # Perform PCA and keep requested number of components\n    m = min(ncomp, min(dim(dat)))\n    udv = svd(scale(t(dat), scale=F))\n    dat.pca = udv$u[,1:m] %*% diag(udv$d[1:m])  # samples x m\n\n    # Compute principal curve and PDS/QDS scores\n    res = principal_curve(dat.pca, start=rbind(dat.pca[reference,], dat.pca[!reference,]))\n    pds = res$lambda\n    opr = order(pds[reference])\n\txcen = res$s[which(reference)[opr[1+length(opr)/2]],]\n\tqds = sqrt(apply(res$s, 1, function(x) {sum((x-xcen)^2)}))\n\n\t# Test for differential QDS score in reference samples vs others\n\tpval = wilcox.test(qds[reference], qds[!reference])$p.value\n\n\t#auc\n\troc.res = roc(as.numeric(reference),qds)\n\tauc.res = auc(roc.res)\n\troc.res = roc(as.numeric(reference),pds)\n\tauc.res.2 = auc(roc.res)\n\n\t# Return results\n\tlist(qds=qds, pds=pds, p.value=pval, auc.qds=auc.res, auc.pds=auc.res.2, data=dat, ref=reference, res=res,\n\t    xcen=xcen, v=udv$v[,1:m], d=udv$d[1:m],pathwayindex=pathwayindex)\n}\n\n# Method to apply QPath curve to new observations\n# obj: output from compute.QPath\n# newdata: expression data ({genes in pathway} x samples)\n\npredict.QPath = function(obj, newdata, normalize=T) {\n    if (normalize) {\n        for (i in 1:nrow(dat)) {\n            newdata[i,] = (newdata[i,]-mean(newdata[i,]))/sd(newdata[i,])\n        }\n    }\n    newdata.pca = t(newdata) %*% obj$v   # nsamples x m\n    res = project_to_curve(newdata.pca, obj$res$s)\n    pds = res$lambda\n    qds = sqrt(apply(res$s, 1, function(x) {sum((x-obj$xcen)^2)}))\n    pval = wilcox.test(obj$qds[obj$reference], qds)$p.value\n    list(qds=qds, pds=pds, p.value=pval)\n}\n\nplot.QPath = function(obj, interactions) {\n    gid = rownames(obj$data)\n    if (missing(interactions)) {\n        fname = path(\"reactome.homo_sapiens.interactions.simplified.txt\")\n        ppin = read.table(fname, header=T, sep=\"\\t\", stringsAsFactors=F)[,1:4]\n    }\n\n    # Extract relevant part of ppi table\n    ok = interactions$interactor1 %in% gid & interactions$interactor2 %in% gid\n    tmp = as.matrix(interactions[ok,1:2])\n\n    # Plot graph with gene color = correlation to QDS\n    library(igraph)\n    unodes = c()\n    for (i in 1:nrow(tmp)) {\n        unodes = c(unodes, tmp[i,])\n    }\n    unodes = unodes[!duplicated(unodes)]\n    X = obj$data[match(unodes, rownames(obj$data)),]\n    qds.col = rep(NA, length(unodes))\n    for (ii in 1:nrow(X)) {\n        a = X[ii, obj$qds <= median(obj$qds)]\n        b = X[ii, obj$qds > median(obj$qds)]\n        p = t.test(a,b)$p.value\n        if (p < 0.05) {\n            if (mean(a) < mean(b)) {\n                qds.col[ii] = rgb(1, 1-0.5, 1-0.5)\n            } else {\n                qds.col[ii] = rgb(1-0.5, 1, 1-0.5)\n            }\n        } else {\n            qds.col[ii] = rgb(1,1,1)\n        }\n    }\n    gr = graph_from_edgelist(tmp)\n    plot(gr, vertex.label.cex=0.7, vertex.color=qds.col, arrow.size=0.5)\n}\n\n#plot.pcurve = function(obj)\n\nget.pathways = function(id=c(\"symbol\",\"entrez\"), min.size=5, interactions=F) {\n    library(reactome.db)\n    library(hgug4112a.db)\n    # Find pathways (n=2192)\n    ptwy.ids = unlist(as.list(reactomePATHNAME2ID))\n    ptwy.all = as.list(reactomePATHID2EXTID)\n    ptwy.hs = ptwy.all[grep(\"HSA\", names(ptwy.all))]\n    ptwy.hs.shortID = names(ptwy.hs)\n    ptwy.hs.longID = names(ptwy.ids)[match(ptwy.hs.shortID, ptwy.ids)]\n\n    # Remove pathways with too few genes\n    keep = which(sapply(ptwy.hs, length) >= min.size)\n    ptwy.hs = ptwy.hs[keep]\n    ptwy.hs.shortID = ptwy.hs.shortID[keep]\n    ptwy.hs.longID = ptwy.hs.longID[keep]\n\n    # Read interactions if required\n    if (interactions) {\n        fname = path(\"reactome.homo_sapiens.interactions.simplified.txt\")\n        ppin = read.table(fname, header=T, sep=\"\\t\", stringsAsFactors=F)[,1:4]\n    }\n\n    # Change identifier if required\n    if (id[1] == \"symbol\") {\n        # entrez: Entrez ids, names(entrez): gene symbols\n        entrez = unlist(as.list(org.Hs.egSYMBOL2EG))\n        gid = lapply(ptwy.hs, function(x) sort(names(entrez)[match(x, entrez)]))\n        if (interactions) {\n            ppin[,1] = names(entrez)[match(ppin[,1],entrez)]\n            ppin[,2] = names(entrez)[match(ppin[,2],entrez)]\n        }\n    } else if (id[1] == \"entrez\") {\n        gid = ptwy.hs\n    }\n\n    # Simplify interaction table if required\n    if (interactions) {\n      keep = !duplicated(ppin[,1:2]) & ppin[,1]!=ppin[,2]\n      ppin = ppin[keep,]\n    }\n\n    # Remove any duplicattions in gene lists\n    gid = lapply(gid, unique)\n\n    # Return result\n    if (interactions) {\n        list(id=ptwy.hs.shortID, id2=ptwy.hs.longID, genes=gid, ppi=ppin)\n    } else {\n        list(id=ptwy.hs.shortID, id2=ptwy.hs.longID, genes=gid)\n    }\n}\n\nsplit.train.test = function(nsamples, fixed.train=c(), fixed.test=c(), prop.train=2/3, seed) {\n    if (!missing(seed)) {\n        set.seed(seed)\n    }\n    samp.distr = setdiff(1:nsamples, union(fixed.train, fixed.test))\n    ntrain = round(nsamples * prop.train)\n    samp.train = c(fixed.train, sample(samp.distr, ntrain-length(fixed.train)))\n    samp.test = setdiff(1:nsamples, samp.train)\n    return(list(train=samp.train, test=samp.test))\n}\n\n# Read data (1952 BC, 144 adj normal, 19 benign)\nfname = path(\"/commongenesmRNA/sampleannotation_mRNA.txt\")\npheno = read.table(fname, sep=\"\\t\", header=TRUE, comment.char=\"\")\nfname = path(\"/commongenesmRNA/illuminacommonmat.txt\")\ndata = as.matrix(read.table(fname, header=TRUE)) # 14596 x 2115\nmid = match(colnames(data), as.character(pheno[,6]))\npheno = pheno[mid,]\nnormal = ifelse(pheno[,3]==\"normal\", T, F)\n\nlibrary(xlsx)\nclin<-read.xlsx(\"/Users/stalenygard/eurocan/survival/Clinical_dataset_FINAL_updated_merged_clusterings illumina.xlsx\",sheetIndex=1)\nmid<-match(pheno$sample_id,clin$METABRIC_ID)\ntp53<-clin$TP53[mid]\ner<-clin$ER[mid]\nher2<-clin$HER2[mid]\nix<-which((tp53==0 | tp53==1))\npheno2<-cbind(pheno[ix,],clin[mid[ix],])\n\nprint(length(ix))\n#data2<-data[,ix]\n#ref<-ifelse(tp53[ix]==0,TRUE,FALSE)\ndata2=data\nref<-normal\n# Run pathway analysis\nptwy = get.pathways()\npval = rep(NA, length(ptwy$id))\nP<-Q<-matrix(0,ncol=ncol(data2),nrow=length(ptwy$id))\nR<-list()\n#pdf(\"Pathway_figures.pdf\")\nfor (i in 1:length(ptwy$id)) {\n#for (i in 1:10) {\n\tprint(i)\n\tR[[i]]<-NULL\n    keep = rownames(data2) %in% ptwy$genes[[i]]\n    if(length(which(keep==TRUE))>10){\n    \tres= compute.QPath(data2[keep,], reference=ref,pathwayindex=i)\n    \tP[i,]<-res$pds\n    \tQ[i,]<-res$qds/max(res$qds,na.rm=TRUE)\n    \tpval[i]= res$p.value\n    \tR[[i]] = res\n    }\n    #pauc[i] = res[[i]]$p.auc\n#    plot.QPath(res, ptwy$ppi)\n}\n\nr<-rep(NA,length(ptwy$id))\nfor (i in 1:length(r)) r[i]<-cor(P[i,],Q[i,])\n\ng<-rep(NA,ncol(data))\ng[which(normal==TRUE)]<-\"black\"\ng[which(normal==FALSE)]<-\"red\"\ng2<-g\ng2[which(normal==TRUE)]<-\"black\"\ng2[which(normal==FALSE)]<-\"red\"\n\np2<-rep(1,ncol(data))\np2[which(normal==TRUE)]<-20\np2[which(normal==FALSE)]<-20\n\no<-order(abs(r))\nk<-o[1]\nr[k]\nkeep = rownames(data2) %in% ptwy$genes[[k]]\nres= compute.QPath(data2[keep,], reference=ref,pathwayindex=k)\nress<-prcomp(t(data2[keep,]),scale.=TRUE)\nplot3d(ress$x,col=g,size=2)\n#plot3d(res$res$s,size=10,col=\"black\",add=TRUE)\n#pch3d(res$res$s,col=\"grey\",size=5)\n#pch3d(res$res$s,col=g2,size=5,pch=20)\n#pch3d(res$res$s,col=g2,add=TRUE,size=5)\nplot3d(res$res$s,col=g2,add=TRUE,size=5)\nlines3d(c(0,1,2),c(1,2,3))\nplot(P[k,],Q[k,])\nk\nnames(ptwy)\nptwy$id2[[k]]\nwrite.table(res$res$s,file=\"pca.txt\",sep=\"\\t\",row.names=FALSE)\nwrite.table(ress$x,file=\"princurve.txt\",sep=\"\\t\",row.names=FALSE)\n\n#aucs.qds<-unlist(sapply(R,\"[[\",4))\n#aucs.pds<-unlist(sapply(R,\"[[\",5))\naucs.qds<-unlist(sapply(R,\"[[\",4))\naucs.pds<-unlist(sapply(R,\"[[\",5))\npvals<-unlist(sapply(R,\"[[\",3))\nfdr<-p.adjust(pvals,\"fdr\")\n\nix<-unlist(sapply(R,\"[[\",12))\n\n#V<-cbind(ptwy$id[ix],ptwy$id2[ix],aucs.tp53.tnbc.qds,pvals,fdr,ptwy$genes[ix])\nV<-cbind(ptwy$id[ix],ptwy$id2[ix],aucs.qds,pvals,fdr)\nfor (i in 1:nrow(V)) V[i,6]<-paste(unlist(V[i,6]),collapse=\" \")\n#colnames(V)<-c(\"Reactome ID\",\"Pathway name\",\"AUC\",\"P-value\",\"FDR\",\"Genes\")\ncolnames(V)<-c(\"Reactome ID\",\"Pathway name\",\"AUC\",\"P-value\",\"FDR\")\no<-order(aucs.qds,decreasing=TRUE)\nV<-V[o,]\nV[1:10,]\n#VV<-as.matrix(V)\nwrite.table(V,file=\"tumor-only-tp53mut-vs-wt-pathways-ranked-by-auc.txt\",row.names=FALSE,quote=FALSE,sep=\"\\t\")\n\nix<-which(apply(P,1,mean)==0)\nP2<-P[-ix,]\nQ2<-Q[-ix,]\n\npathActScores<-Q2[o,]\nrow.names(pathActScores)<-V[,2]\npathActScores[1:10,]\naucs.qds<-aucs.qds[o]\npvals<-pvals[o]\nfdr<-fdr[o]\n\nnames(aucs.qds)<-V[,2]\nnames(pvals)<-V[,2]\nnames(fdr)<-V[,2]\n\ncolnames(pathActScores)<-pheno2$sample_id\n\nsave(list=c(\"pathActScores\",\"aucs.qds\",\"pvals\",\"fdr\",\"pheno2\"),file=\"pathActScores-and-AUCs-metabric-tumor-only-tp53mut-vs-wt.RData\")\n\n\n#\nix<-which(fdr<0.1)\n#ix<-which(aucs.qds>0.6)\nlength(ix)\nX<-pathActScores[ix,]\n\n#pdf(\"aucs-tumor_vs_normal.pdf\")\n#plot(density(aucs.pds,from=0,to=1),pch=\"\",)\n#lines(density(aucs.pds,from=0,to=1))\n#lines(density(aucs.qds,from=0,to=1),col=\"red\")\n#graphics.off()\n\n#pdf(\"aucs-er0-tp53mut-vs-wt.pdf\")\n#plot(density(aucs.tp53.er0.pds,from=0,to=1),pch=\"\",main=\"Histogram of AUC values\")\n#lines(density(aucs.tp53.er0.pds,from=0,to=1))\n#lines(density(aucs.tp53.er0.qds,from=0,to=1),col=\"red\")\n#legend(\"topleft\",c(\"PDS\",\"QDS\"),lty=1,col=c(\"black\",\"red\"))\n#graphics.off()\n\no<-order(r)\nfor (i in 1:1000){\n  k<-o[i]\n  r[k]\n  keep = rownames(data2) %in% ptwy$genes[[k]]\n  res= compute.QPath(data2[keep,], reference=ref,pathwayindex=k)\n  ress<-prcomp(t(data2[keep,]),scale.=TRUE)\n  colnames(res$res$s)<-c(\"comp1\",\"comp2\",\"comp3\",\"comp4\")\n  write.table(res$res$s,file=paste(\"./pcaplots/princurve\",i,\",.txt\"),sep=\"\\t\",row.names=FALSE,col.names=TRUE)\n  write.table(ress$x,file=paste(\"./pcaplots/pca\",i,\",.txt\"),sep=\"\\t\",row.names=FALSE,col.names=TRUE)\n}\n\n\n\nptwy_names<-strsplit(ptwy$id2[o[1:1000]])\nfor (i in 1:1000){\n  k<-o[i]\n  write.table(ptwy$id2[k],file=\"ptwy_names_2.txt\",sep=\"\\t\")\n}\n\n\n\n\n",
    "created" : 1561382408666.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2255000752",
    "id" : "E9FE63D7",
    "lastKnownWriteTime" : 1514766503,
    "last_content_update" : 1514766503266,
    "path" : "~/eurocan/plot3d-cmd.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}