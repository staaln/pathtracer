{
    "collab_server" : "",
    "contents" : "# Hello, world!\n#\n# This is an example function named 'hello'\n# which prints 'Hello, world!'.\n#\n# You can learn more about package authoring with RStudio at:\n#\n#   http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Cmd + Shift + B'\n#   Check Package:             'Cmd + Shift + E'\n#   Test Package:              'Cmd + Shift + T'\n\ncompute.pts = function(dat, reference, ncomp=4, normalize=T,pathwayindex) {\n  # Check reference argument\n  if (mode(reference) == \"logical\") {\n    if (length(reference) != ncol(dat)) {\n      stop(paste(\"Boolean argument has wrong length: reference\"))\n    } else if (!any(reference)) {\n      stop(paste(\"Reference population must have at least one member\"))\n    } else if (all(reference)) {\n      stop(paste(\"Non-reference population must have at least one member\"))\n    }\n  } else if (mode(reference) == \"numeric\") {\n    reference = (1:ncol(dat)) %in% reference\n  } else {\n    stop(\"Argument must be logical vector or numeric vector: reference\")\n  }\n\n  # Normalize features if requested\n  if (normalize) {\n    for (i in 1:nrow(dat)) {\n      dat[i,] = (dat[i,]-mean(dat[i,]))/sd(dat[i,])\n    }\n  }\n\n  # Perform PCA and keep requested number of components\n  m = min(ncomp, min(dim(dat)))\n  udv = svd(scale(t(dat), scale=F))\n  dat.pca = udv$u[,1:m] %*% diag(udv$d[1:m])  # samples x m\n\n  # Compute principal curve and PDS/QDS scores\n  res = principal_curve(dat.pca, start=rbind(dat.pca[reference,], dat.pca[!reference,]))\n  pds = res$lambda\n  opr = order(pds[reference])\n  xcen = res$s[which(reference)[opr[1+length(opr)/2]],]\n  qds = sqrt(apply(res$s, 1, function(x) {sum((x-xcen)^2)}))\n\n  # Test for differential QDS score in reference samples vs others\n  pval = wilcox.test(qds[reference], qds[!reference])$p.value\n\n  #auc\n  roc.res = roc(as.numeric(reference),qds)\n  auc.res = auc(roc.res)\n  roc.res = roc(as.numeric(reference),pds)\n  auc.res.2 = auc(roc.res)\n\n  # Return results\n  list(qds=qds, pds=pds, p.value=pval, auc.qds=auc.res, auc.pds=auc.res.2, data=dat, ref=reference, res=res,\n       xcen=xcen, v=udv$v[,1:m], d=udv$d[1:m],pathwayindex=pathwayindex)\n}\n",
    "created" : 1561382389564.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2935484676",
    "id" : "40D4F6E1",
    "lastKnownWriteTime" : 1562143950,
    "last_content_update" : 1562143950678,
    "path" : "~/pathtracer/R/compute.pts.R",
    "project_path" : "R/compute.pts.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}